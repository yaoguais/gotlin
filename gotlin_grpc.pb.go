// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package gotlin

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// ServerServiceClient is the client API for ServerService service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type ServerServiceClient interface {
	RegisterExecutor(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*RegisterExecutorResponse, error)
	UnregisterExecutor(ctx context.Context, in *UnregisterExecutorRequest, opts ...grpc.CallOption) (*UnregisterExecutorResponse, error)
	ExecuteCommand(ctx context.Context, opts ...grpc.CallOption) (ServerService_ExecuteCommandClient, error)
}

type serverServiceClient struct {
	cc grpc.ClientConnInterface
}

func NewServerServiceClient(cc grpc.ClientConnInterface) ServerServiceClient {
	return &serverServiceClient{cc}
}

func (c *serverServiceClient) RegisterExecutor(ctx context.Context, in *RegisterExecutorRequest, opts ...grpc.CallOption) (*RegisterExecutorResponse, error) {
	out := new(RegisterExecutorResponse)
	err := c.cc.Invoke(ctx, "/gotlin.ServerService/RegisterExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) UnregisterExecutor(ctx context.Context, in *UnregisterExecutorRequest, opts ...grpc.CallOption) (*UnregisterExecutorResponse, error) {
	out := new(UnregisterExecutorResponse)
	err := c.cc.Invoke(ctx, "/gotlin.ServerService/UnregisterExecutor", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *serverServiceClient) ExecuteCommand(ctx context.Context, opts ...grpc.CallOption) (ServerService_ExecuteCommandClient, error) {
	stream, err := c.cc.NewStream(ctx, &ServerService_ServiceDesc.Streams[0], "/gotlin.ServerService/ExecuteCommand", opts...)
	if err != nil {
		return nil, err
	}
	x := &serverServiceExecuteCommandClient{stream}
	return x, nil
}

type ServerService_ExecuteCommandClient interface {
	Send(*CommandFromClient) error
	Recv() (*CommandToClient, error)
	grpc.ClientStream
}

type serverServiceExecuteCommandClient struct {
	grpc.ClientStream
}

func (x *serverServiceExecuteCommandClient) Send(m *CommandFromClient) error {
	return x.ClientStream.SendMsg(m)
}

func (x *serverServiceExecuteCommandClient) Recv() (*CommandToClient, error) {
	m := new(CommandToClient)
	if err := x.ClientStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerServiceServer is the server API for ServerService service.
// All implementations must embed UnimplementedServerServiceServer
// for forward compatibility
type ServerServiceServer interface {
	RegisterExecutor(context.Context, *RegisterExecutorRequest) (*RegisterExecutorResponse, error)
	UnregisterExecutor(context.Context, *UnregisterExecutorRequest) (*UnregisterExecutorResponse, error)
	ExecuteCommand(ServerService_ExecuteCommandServer) error
	mustEmbedUnimplementedServerServiceServer()
}

// UnimplementedServerServiceServer must be embedded to have forward compatible implementations.
type UnimplementedServerServiceServer struct {
}

func (UnimplementedServerServiceServer) RegisterExecutor(context.Context, *RegisterExecutorRequest) (*RegisterExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method RegisterExecutor not implemented")
}
func (UnimplementedServerServiceServer) UnregisterExecutor(context.Context, *UnregisterExecutorRequest) (*UnregisterExecutorResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method UnregisterExecutor not implemented")
}
func (UnimplementedServerServiceServer) ExecuteCommand(ServerService_ExecuteCommandServer) error {
	return status.Errorf(codes.Unimplemented, "method ExecuteCommand not implemented")
}
func (UnimplementedServerServiceServer) mustEmbedUnimplementedServerServiceServer() {}

// UnsafeServerServiceServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to ServerServiceServer will
// result in compilation errors.
type UnsafeServerServiceServer interface {
	mustEmbedUnimplementedServerServiceServer()
}

func RegisterServerServiceServer(s grpc.ServiceRegistrar, srv ServerServiceServer) {
	s.RegisterService(&ServerService_ServiceDesc, srv)
}

func _ServerService_RegisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(RegisterExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).RegisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotlin.ServerService/RegisterExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).RegisterExecutor(ctx, req.(*RegisterExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_UnregisterExecutor_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(UnregisterExecutorRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(ServerServiceServer).UnregisterExecutor(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/gotlin.ServerService/UnregisterExecutor",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(ServerServiceServer).UnregisterExecutor(ctx, req.(*UnregisterExecutorRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _ServerService_ExecuteCommand_Handler(srv interface{}, stream grpc.ServerStream) error {
	return srv.(ServerServiceServer).ExecuteCommand(&serverServiceExecuteCommandServer{stream})
}

type ServerService_ExecuteCommandServer interface {
	Send(*CommandToClient) error
	Recv() (*CommandFromClient, error)
	grpc.ServerStream
}

type serverServiceExecuteCommandServer struct {
	grpc.ServerStream
}

func (x *serverServiceExecuteCommandServer) Send(m *CommandToClient) error {
	return x.ServerStream.SendMsg(m)
}

func (x *serverServiceExecuteCommandServer) Recv() (*CommandFromClient, error) {
	m := new(CommandFromClient)
	if err := x.ServerStream.RecvMsg(m); err != nil {
		return nil, err
	}
	return m, nil
}

// ServerService_ServiceDesc is the grpc.ServiceDesc for ServerService service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var ServerService_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "gotlin.ServerService",
	HandlerType: (*ServerServiceServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "RegisterExecutor",
			Handler:    _ServerService_RegisterExecutor_Handler,
		},
		{
			MethodName: "UnregisterExecutor",
			Handler:    _ServerService_UnregisterExecutor_Handler,
		},
	},
	Streams: []grpc.StreamDesc{
		{
			StreamName:    "ExecuteCommand",
			Handler:       _ServerService_ExecuteCommand_Handler,
			ServerStreams: true,
			ClientStreams: true,
		},
	},
	Metadata: "gotlin.proto",
}
