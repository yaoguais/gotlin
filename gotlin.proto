syntax = "proto3";

package gotlin;

option go_package = "github.com/yaoguais/gotlin";

service ServerService {
    rpc RegisterExecutor(RegisterExecutorRequest) returns(RegisterExecutorResponse) {}
    rpc UnregisterExecutor(UnregisterExecutorRequest) returns(UnregisterExecutorResponse) {}
    rpc ExecuteCommand(stream CommandFromRemote) returns (stream CommandToRemote) {}
    rpc RequestScheduler(RequestSchedulerRequest) returns(RequestSchedulerResponse) {}
    rpc RunProgram(RunProgramRequest) returns(RunProgramResponse) {}
    rpc WaitResult(WaitResultRequest) returns (stream WaitResultResponse) {}
}

message RegisterExecutorRequest {
    message Label {
        string key = 1;
        string value = 2;
    }
    string id = 1;
    repeated Label labels = 2;
    string host = 3;
}

message RegisterExecutorResponse {
}

message UnregisterExecutorRequest {
    string id = 1;
    string error = 2;
}

message UnregisterExecutorResponse {
}

enum CommandType {
    Unknown = 0;
    ConnectToServer = 1;
    Ping = 2;
    Pong = 3;
    ExecuteInstruction = 4;
}

message CommandFromRemote {
    message ExecuteInstruction {
        string id = 1; 
        string opcode = 2;
        bytes result = 3;
    }
    string id = 1;
    CommandType type = 2;
    int64 spent = 3;
    ExecuteInstruction execute_instruction = 4;
}

message CommandToRemote {
    message Instruction {
        string id = 1; 
        string opcode = 2;
        bytes operand = 3;
        bytes result = 4;
    }
    message ExecuteInstruction {
        Instruction op = 1;
        repeated Instruction args = 2;
    }
    string id = 1;
    CommandType type = 2;
    int64 timeout = 3;
    string error = 4;
    ExecuteInstruction execute_instruction = 5;
}

message RequestSchedulerRequest {
    string dummy = 1;
}

message RequestSchedulerResponse {
    string id = 1;
}

message ProgramPb {
    string id = 1;
    bytes code = 2;
    bytes processor = 3;
}

message InstructionPb {
    string id = 1;
    string id2 = 2;
    string opcode = 3;
    bytes operand = 4;
    bytes result = 5;
}

message RunProgramRequest {
    string scheduler_id = 1;
    ProgramPb program = 2;
    repeated InstructionPb instructions = 3;
}

message RunProgramResponse {

}

message WaitResultRequest {

}

message WaitResultResponse {
    string id = 1;
    bytes result = 2;
    string error = 3;
}
